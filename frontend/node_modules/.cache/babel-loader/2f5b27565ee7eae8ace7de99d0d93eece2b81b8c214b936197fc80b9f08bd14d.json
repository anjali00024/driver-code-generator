{"ast":null,"code":"var _jsxFileName = \"/Users/anjali.kumari/Documents/test-project-catalyst/frontend/src/components/QueryInterface.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, Textarea, VStack, useToast, Code, Text, Table, Thead, Tbody, Tr, Th, Td, TableContainer, Heading, CircularProgress, RadioGroup, Stack, Radio } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QueryInterface({\n  config\n}) {\n  _s();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [queryMode, setQueryMode] = useState('driver');\n  const toast = useToast();\n  const handleSubmit = async () => {\n    if (!query.trim()) {\n      toast({\n        title: 'Query cannot be empty',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true\n      });\n      return;\n    }\n    setIsLoading(true);\n    setResults(null);\n    const backendPayload = {\n      query: query,\n      config: {\n        database_id: config.dbUUID || '',\n        token: config.token,\n        keyspace: config.keyspace,\n        region: config.region,\n        secure_bundle: config.secureConnectBundle\n      },\n      mode: {\n        mode: queryMode,\n        driver_type: config.driverType,\n        consistency_level: config.consistencyLevel,\n        retry_policy: config.retryPolicy,\n        load_balancing_policy: config.loadBalancingPolicy\n      }\n    };\n    try {\n      console.log('Sending request to backend:', backendPayload);\n      const response = await fetch('/api/execute-query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(backendPayload)\n      });\n      const data = await response.json();\n      console.log('Received response from backend:', data);\n      if (!response.ok) {\n        throw new Error(data.detail || data.error || 'Failed to execute query');\n      }\n\n      // Check response structure and log it for debugging\n      if (data.columns) {\n        console.log('Columns received:', data.columns);\n      } else {\n        console.log('No columns in response');\n      }\n      if (data.rows) {\n        console.log('Rows received:', data.rows);\n        console.log('Row count:', data.rows.length);\n      } else {\n        console.log('No rows in response');\n      }\n      setResults(data);\n      toast({\n        title: getSuccessMessage(),\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      });\n    } catch (error) {\n      console.error('Error executing query:', error);\n      const errorMessage = error.message || 'An unexpected error occurred.';\n      setResults({\n        error: errorMessage\n      });\n      toast({\n        title: 'Error',\n        description: errorMessage,\n        status: 'error',\n        duration: 5000,\n        isClosable: true\n      });\n    }\n    setIsLoading(false);\n  };\n  const getSuccessMessage = () => {\n    switch (queryMode) {\n      case 'execute':\n        return 'Query executed successfully!';\n      case 'driver':\n        return 'Driver code generated successfully!';\n      case 'natural_language':\n        return 'Natural language query processed successfully!';\n      default:\n        return 'Operation completed successfully!';\n    }\n  };\n  const getInputPlaceholder = () => {\n    switch (queryMode) {\n      case 'execute':\n        return 'Enter your CQL query here (e.g., SELECT * FROM table_name)';\n      case 'driver':\n        return 'Enter your CQL query to generate driver code';\n      case 'natural_language':\n        return 'Describe what you want to do in plain English (e.g., \"Insert 10 rows\" or \"Create a large partition with 1000 rows\")';\n      default:\n        return 'Enter your query here';\n    }\n  };\n  const getButtonText = () => {\n    switch (queryMode) {\n      case 'execute':\n        return 'Execute Query';\n      case 'driver':\n        return 'Generate Driver Code';\n      case 'natural_language':\n        return 'Generate Code from Description';\n      default:\n        return 'Submit';\n    }\n  };\n  const renderResults = () => {\n    if (results) {\n      var _results$rows;\n      console.log('About to render results:', {\n        hasColumns: Boolean(results.columns),\n        columnData: results.columns,\n        hasRows: Boolean(results.rows),\n        rowCount: (_results$rows = results.rows) === null || _results$rows === void 0 ? void 0 : _results$rows.length,\n        firstRow: results.rows && results.rows.length > 0 ? results.rows[0] : null,\n        hasDriverCode: Boolean(results.driver_code),\n        hasError: Boolean(results.error)\n      });\n    }\n  };\n  renderResults();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 5,\n    shadow: \"md\",\n    borderWidth: \"1px\",\n    borderRadius: \"md\",\n    w: \"100%\",\n    maxW: \"800px\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      size: \"md\",\n      mb: 4,\n      children: \"Driver Code Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 4,\n      align: \"stretch\",\n      children: [/*#__PURE__*/_jsxDEV(Textarea, {\n        placeholder: getInputPlaceholder(),\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        rows: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n        onChange: value => setQueryMode(value),\n        value: queryMode,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          spacing: 5,\n          mb: 3,\n          children: [/*#__PURE__*/_jsxDEV(Radio, {\n            value: \"execute\",\n            children: \"Execute Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Radio, {\n            value: \"driver\",\n            children: \"Generate Driver Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Radio, {\n            value: \"natural_language\",\n            children: \"Natural Language\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"teal\",\n        onClick: handleSubmit,\n        isLoading: isLoading,\n        children: getButtonText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n      isIndeterminate: true,\n      color: \"teal.300\",\n      my: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }, this), results && /*#__PURE__*/_jsxDEV(Box, {\n      mt: 6,\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        size: \"sm\",\n        mb: 3,\n        children: \"Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        size: \"xs\",\n        colorScheme: \"gray\",\n        mb: 2,\n        onClick: () => {\n          console.log('Raw results:', results);\n          toast({\n            title: 'Raw results logged to console',\n            description: 'Check browser console for details',\n            status: 'info',\n            duration: 3000\n          });\n        },\n        children: \"Debug: Show Raw Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this), results.error && /*#__PURE__*/_jsxDEV(Code, {\n        colorScheme: \"red\",\n        p: 3,\n        borderRadius: \"md\",\n        children: [\"Error: \", results.error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }, this), results.execution_time !== undefined && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"sm\",\n        color: \"gray.500\",\n        mb: 2,\n        children: [\"Execution time: \", results.execution_time.toFixed(4), \" ms\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }, this), results.original_query && /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"sm\",\n          fontWeight: \"bold\",\n          children: \"Original request:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Code, {\n          p: 2,\n          borderRadius: \"md\",\n          display: \"block\",\n          whiteSpace: \"pre-wrap\",\n          children: results.original_query\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }, this), results.driver_code && /*#__PURE__*/_jsxDEV(Box, {\n        mt: 4,\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          size: \"sm\",\n          mb: 2,\n          children: \"Driver Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Code, {\n          p: 3,\n          borderRadius: \"md\",\n          display: \"block\",\n          whiteSpace: \"pre\",\n          overflowX: \"auto\",\n          children: results.driver_code\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }, this), results.instructions && /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"sm\",\n          mt: 2,\n          children: results.instructions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this), results.columns && results.rows && results.rows.length > 0 && /*#__PURE__*/_jsxDEV(TableContainer, {\n        mt: 4,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          variant: \"striped\",\n          size: \"sm\",\n          children: [/*#__PURE__*/_jsxDEV(Thead, {\n            children: /*#__PURE__*/_jsxDEV(Tr, {\n              children: results.columns.map(colName => /*#__PURE__*/_jsxDEV(Th, {\n                children: colName\n              }, colName, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n            children: results.rows.map((row, rowIndex) => {\n              var _results$columns;\n              return /*#__PURE__*/_jsxDEV(Tr, {\n                children: (_results$columns = results.columns) === null || _results$columns === void 0 ? void 0 : _results$columns.map(colName => {\n                  const cellValue = row[colName];\n                  return /*#__PURE__*/_jsxDEV(Td, {\n                    children: typeof cellValue === 'object' ? JSON.stringify(cellValue) : cellValue !== null && cellValue !== undefined ? String(cellValue) : ''\n                  }, colName, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 27\n                  }, this);\n                })\n              }, rowIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 13\n      }, this), results.rows && results.rows.length === 0 && /*#__PURE__*/_jsxDEV(Text, {\n        mt: 2,\n        fontStyle: \"italic\",\n        children: \"Query executed successfully, but no rows were returned.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(QueryInterface, \"6apbIlYQA67M+o+4wzMAj0C4izY=\", false, function () {\n  return [useToast];\n});\n_c = QueryInterface;\nexport default QueryInterface;\nvar _c;\n$RefreshReg$(_c, \"QueryInterface\");","map":{"version":3,"names":["React","useState","Box","Button","Textarea","VStack","useToast","Code","Text","Table","Thead","Tbody","Tr","Th","Td","TableContainer","Heading","CircularProgress","RadioGroup","Stack","Radio","jsxDEV","_jsxDEV","QueryInterface","config","_s","query","setQuery","results","setResults","isLoading","setIsLoading","queryMode","setQueryMode","toast","handleSubmit","trim","title","status","duration","isClosable","backendPayload","database_id","dbUUID","token","keyspace","region","secure_bundle","secureConnectBundle","mode","driver_type","driverType","consistency_level","consistencyLevel","retry_policy","retryPolicy","load_balancing_policy","loadBalancingPolicy","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","detail","error","columns","rows","length","getSuccessMessage","errorMessage","message","description","getInputPlaceholder","getButtonText","renderResults","_results$rows","hasColumns","Boolean","columnData","hasRows","rowCount","firstRow","hasDriverCode","driver_code","hasError","p","shadow","borderWidth","borderRadius","w","maxW","children","size","mb","fileName","_jsxFileName","lineNumber","columnNumber","spacing","align","placeholder","value","onChange","e","target","direction","colorScheme","onClick","isIndeterminate","color","my","mt","execution_time","undefined","fontSize","toFixed","original_query","fontWeight","display","whiteSpace","overflowX","instructions","variant","map","colName","row","rowIndex","_results$columns","cellValue","String","fontStyle","_c","$RefreshReg$"],"sources":["/Users/anjali.kumari/Documents/test-project-catalyst/frontend/src/components/QueryInterface.tsx"],"sourcesContent":["import React, { useState, ChangeEvent } from 'react';\nimport {\n  Box,\n  Button,\n  Textarea,\n  VStack,\n  useToast,\n  Code,\n  Text,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableContainer,\n  Heading,\n  CircularProgress,\n  RadioGroup,\n  Stack,\n  Radio,\n} from '@chakra-ui/react';\n\ninterface ConnectionConfig {\n  secureConnectBundle: string;\n  keyspace: string;\n  token: string;\n  region: string;\n  connectionMethod: 'driver';\n  driverType: 'python' | 'java';\n  consistencyLevel: string;\n  retryPolicy: string;\n  loadBalancingPolicy: string;\n  dbUUID: string;\n}\n\ninterface QueryInterfaceProps {\n  config: ConnectionConfig;\n}\n\ninterface QueryResult {\n  columns?: string[];\n  rows?: Record<string, any>[];\n  driver_code?: string;\n  original_query?: string;\n  instructions?: string;\n  error?: string;\n  execution_time?: number;\n}\n\nfunction QueryInterface({ config }: QueryInterfaceProps) {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<QueryResult | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [queryMode, setQueryMode] = useState<'execute' | 'driver' | 'natural_language'>('driver');\n  const toast = useToast();\n\n  const handleSubmit = async () => {\n    if (!query.trim()) {\n      toast({ title: 'Query cannot be empty', status: 'warning', duration: 3000, isClosable: true });\n      return;\n    }\n    setIsLoading(true);\n    setResults(null);\n\n    const backendPayload = {\n      query: query,\n      config: {\n        database_id: config.dbUUID || '',\n        token: config.token,\n        keyspace: config.keyspace,\n        region: config.region,\n        secure_bundle: config.secureConnectBundle\n      },\n      mode: {\n        mode: queryMode,\n        driver_type: config.driverType,\n        consistency_level: config.consistencyLevel,\n        retry_policy: config.retryPolicy,\n        load_balancing_policy: config.loadBalancingPolicy\n      }\n    };\n\n    try {\n      console.log('Sending request to backend:', backendPayload);\n      const response = await fetch('/api/execute-query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(backendPayload),\n      });\n\n      const data = await response.json();\n      console.log('Received response from backend:', data);\n\n      if (!response.ok) {\n        throw new Error(data.detail || data.error || 'Failed to execute query');\n      }\n      \n      // Check response structure and log it for debugging\n      if (data.columns) {\n        console.log('Columns received:', data.columns);\n      } else {\n        console.log('No columns in response');\n      }\n      \n      if (data.rows) {\n        console.log('Rows received:', data.rows);\n        console.log('Row count:', data.rows.length);\n      } else {\n        console.log('No rows in response');\n      }\n      \n      setResults(data);\n      toast({ \n        title: getSuccessMessage(),\n        status: 'success', \n        duration: 3000, \n        isClosable: true \n      });\n    } catch (error: any) {\n      console.error('Error executing query:', error);\n      const errorMessage = error.message || 'An unexpected error occurred.';\n      setResults({ error: errorMessage });\n      toast({ title: 'Error', description: errorMessage, status: 'error', duration: 5000, isClosable: true });\n    }\n    setIsLoading(false);\n  };\n\n  const getSuccessMessage = () => {\n    switch (queryMode) {\n      case 'execute': \n        return 'Query executed successfully!';\n      case 'driver': \n        return 'Driver code generated successfully!';\n      case 'natural_language': \n        return 'Natural language query processed successfully!';\n      default: \n        return 'Operation completed successfully!';\n    }\n  };\n\n  const getInputPlaceholder = () => {\n    switch (queryMode) {\n      case 'execute': \n        return 'Enter your CQL query here (e.g., SELECT * FROM table_name)';\n      case 'driver': \n        return 'Enter your CQL query to generate driver code';\n      case 'natural_language': \n        return 'Describe what you want to do in plain English (e.g., \"Insert 10 rows\" or \"Create a large partition with 1000 rows\")';\n      default: \n        return 'Enter your query here';\n    }\n  };\n\n  const getButtonText = () => {\n    switch (queryMode) {\n      case 'execute': \n        return 'Execute Query';\n      case 'driver': \n        return 'Generate Driver Code';\n      case 'natural_language': \n        return 'Generate Code from Description';\n      default: \n        return 'Submit';\n    }\n  };\n\n  const renderResults = () => {\n    if (results) {\n      console.log('About to render results:', {\n        hasColumns: Boolean(results.columns),\n        columnData: results.columns,\n        hasRows: Boolean(results.rows),\n        rowCount: results.rows?.length,\n        firstRow: results.rows && results.rows.length > 0 ? results.rows[0] : null,\n        hasDriverCode: Boolean(results.driver_code),\n        hasError: Boolean(results.error)\n      });\n    }\n  };\n\n  renderResults();\n\n  return (\n    <Box p={5} shadow=\"md\" borderWidth=\"1px\" borderRadius=\"md\" w={\"100%\"} maxW={\"800px\"}>\n      <Heading size=\"md\" mb={4}>Driver Code Generator</Heading>\n      <VStack spacing={4} align=\"stretch\">\n        <Textarea\n          placeholder={getInputPlaceholder()}\n          value={query}\n          onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setQuery(e.target.value)}\n          rows={5}\n        />\n        \n        <RadioGroup onChange={(value: string) => setQueryMode(value as 'execute' | 'driver' | 'natural_language')} value={queryMode}>\n          <Stack direction=\"row\" spacing={5} mb={3}>\n            <Radio value=\"execute\">Execute Query</Radio>\n            <Radio value=\"driver\">Generate Driver Code</Radio>\n            <Radio value=\"natural_language\">Natural Language</Radio>\n          </Stack>\n        </RadioGroup>\n        \n        <Button colorScheme=\"teal\" onClick={handleSubmit} isLoading={isLoading}>\n          {getButtonText()}\n        </Button>\n      </VStack>\n\n      {isLoading && <CircularProgress isIndeterminate color=\"teal.300\" my={4} />}\n\n      {results && (\n        <Box mt={6}>\n          <Heading size=\"sm\" mb={3}>Results</Heading>\n          \n          {/* Debug button to show raw response */}\n          <Button \n            size=\"xs\" \n            colorScheme=\"gray\" \n            mb={2}\n            onClick={() => {\n              console.log('Raw results:', results);\n              toast({\n                title: 'Raw results logged to console',\n                description: 'Check browser console for details',\n                status: 'info',\n                duration: 3000\n              });\n            }}\n          >\n            Debug: Show Raw Response\n          </Button>\n          \n          {results.error && (\n            <Code colorScheme=\"red\" p={3} borderRadius=\"md\">\n              Error: {results.error}\n            </Code>\n          )}\n          \n          {results.execution_time !== undefined && (\n            <Text fontSize=\"sm\" color=\"gray.500\" mb={2}>\n              Execution time: {results.execution_time.toFixed(4)} ms\n            </Text>\n          )}\n          \n          {/* Display original natural language query if available */}\n          {results.original_query && (\n            <Box mt={2} mb={4}>\n              <Text fontSize=\"sm\" fontWeight=\"bold\">Original request:</Text>\n              <Code p={2} borderRadius=\"md\" display=\"block\" whiteSpace=\"pre-wrap\">\n                {results.original_query}\n              </Code>\n            </Box>\n          )}\n          \n          {/* Display driver code if available */}\n          {results.driver_code && (\n            <Box mt={4}>\n              <Heading size=\"sm\" mb={2}>Driver Code</Heading>\n              <Code p={3} borderRadius=\"md\" display=\"block\" whiteSpace=\"pre\" overflowX=\"auto\">\n                {results.driver_code}\n              </Code>\n              {results.instructions && (\n                <Text fontSize=\"sm\" mt={2}>{results.instructions}</Text>\n              )}\n            </Box>\n          )}\n          \n          {/* Display query results in a table if available */}\n          {results.columns && results.rows && results.rows.length > 0 && (\n            <TableContainer mt={4}>\n              <Table variant=\"striped\" size=\"sm\">\n                <Thead>\n                  <Tr>\n                    {results.columns.map((colName) => (\n                      <Th key={colName}>{colName}</Th>\n                    ))}\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {results.rows.map((row, rowIndex) => (\n                    <Tr key={rowIndex}>\n                      {results.columns?.map((colName) => {\n                        const cellValue = row[colName];\n                        return (\n                          <Td key={colName}>\n                            {typeof cellValue === 'object' \n                              ? JSON.stringify(cellValue) \n                              : cellValue !== null && cellValue !== undefined \n                                ? String(cellValue) \n                                : ''}\n                          </Td>\n                        );\n                      })}\n                    </Tr>\n                  ))}\n                </Tbody>\n              </Table>\n            </TableContainer>\n          )}\n          {results.rows && results.rows.length === 0 && (\n            <Text mt={2} fontStyle=\"italic\">Query executed successfully, but no rows were returned.</Text>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default QueryInterface; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}